<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!-- Spring希望管理所有的业务逻辑组件-->
    <context:component-scan base-package="cn.cnm">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 引入数据库的配置文件 -->
    <context:property-placeholder location="classpath:db.properties"/>

    <!-- Spring用来控制业务逻辑。数据源、连接池、事务控制、aop -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!-- spring事务管理 -->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 开启基于注解的事务 -->
    <tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>

    <!-- MybatisPlus的MapperScan -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.cnm.mapper"/>
    </bean>

    <!-- 将MyBatis整合到Spring中的SqlSessionFactoryBean替换为MyBatisPlus的 -->
    <bean id="sqlSessionFactoryBean" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <!-- 绑定数据源 -->
        <property name="dataSource" ref="dataSource"></property>
        <!-- configLocation：指定全局配置文件的位置 -->
        <property name="configLocation" value="classpath:mybatis-config-spring.xml"></property>
        <!-- 给实体类取别名， 建议使用这个， 日志不会乱码 -->
        <property name="typeAliasesPackage" value="cn.cnm.pojo"/>
        <!-- MyBatisPlus配置, 很多配置项目和Mybatis是一样的 -->
        <property name="globalConfig" ref="globalConfig"/>
        <!--<property name="configuration" ref="configuration"/>-->
        <property name="plugins">
            <list>
                <!--分页插件注册-->
                <bean class="com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor"></bean>
                <!-- 乐观锁插件 -->
                <bean class="com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor"/>
            </list>
        </property>
    </bean>

    <!-- MyBatisPlus全局配置 -->
    <bean id="globalConfig" class="com.baomidou.mybatisplus.core.config.GlobalConfig">
        <!-- 配置属性都集中到了dbConfig这个类中， 所以它单独拧出来了 -->
        <property name="dbConfig" ref="dbConfig"/>
        <!-- 注册自定义全局操作 -->
        <property name="sqlInjector" ref="mySqlInjector"></property>
    </bean>

    <!-- MyBatisPlus配置项 -->
    <bean id="dbConfig" class="com.baomidou.mybatisplus.core.config.GlobalConfig.DbConfig">
        <!-- 全局主键策略, AUTO表示自增策略， 其他配置参考枚举类IdType -->
        <property name="idType" value="AUTO"></property>
        <!-- 全局的表前缀配置策略， 例如tb_ -->
        <!--<property name="tablePrefix" value="tb_"></property>-->
    </bean>

    <!-- MyBatisPlus配置， 暂时不需要 -->
    <!--<bean id="configuration" class="com.baomidou.mybatisplus.core.MybatisConfiguration">-->
    <!--</bean>-->

    <!--配置一个可以进行批量执行的sqlSession -->
    <bean id="batchSqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"></constructor-arg>
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>

    <!-- 定义自定义注入器 -->
    <bean id="mySqlInjector" class="cn.cnm.injector.MyInjector"></bean>
</beans>